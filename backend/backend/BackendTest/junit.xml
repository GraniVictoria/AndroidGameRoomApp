<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="85" failures="0" errors="0" time="5.524">
  <testsuite name="GameLobbyStore" errors="0" failures="0" skipped="0" timestamp="2023-11-21T04:58:46" time="1.341" tests="10">
    <testcase classname="GameLobbyStore init should initialize the database connection and collection" name="GameLobbyStore init should initialize the database connection and collection" time="0.04">
    </testcase>
    <testcase classname="GameLobbyStore insertLobby should insert a new lobby into the collection" name="GameLobbyStore insertLobby should insert a new lobby into the collection" time="0.004">
    </testcase>
    <testcase classname="GameLobbyStore updateLobby should update a lobby in the collection" name="GameLobbyStore updateLobby should update a lobby in the collection" time="0.003">
    </testcase>
    <testcase classname="GameLobbyStore setPlayerReady should set a player ready in a lobby" name="GameLobbyStore setPlayerReady should set a player ready in a lobby" time="0.002">
    </testcase>
    <testcase classname="GameLobbyStore getLobby should retrieve a lobby" name="GameLobbyStore getLobby should retrieve a lobby" time="0.002">
    </testcase>
    <testcase classname="GameLobbyStore getAllLobby should retrieve all lobbies" name="GameLobbyStore getAllLobby should retrieve all lobbies" time="0.001">
    </testcase>
    <testcase classname="GameLobbyStore deleteLobby should delete a lobby" name="GameLobbyStore deleteLobby should delete a lobby" time="0.002">
    </testcase>
    <testcase classname="GameLobbyStore setPlayerBet should set a player bet in a lobby" name="GameLobbyStore setPlayerBet should set a player bet in a lobby" time="0.002">
    </testcase>
    <testcase classname="GameLobbyStore getPlayerCount should retrieve the player count for a lobby" name="GameLobbyStore getPlayerCount should retrieve the player count for a lobby" time="0.002">
    </testcase>
    <testcase classname="GameLobbyStore close should close the database connection" name="GameLobbyStore close should close the database connection" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="UserStore" errors="0" failures="0" skipped="0" timestamp="2023-11-21T04:58:46" time="1.439" tests="10">
    <testcase classname="UserStore connect should throw an error if database connection fails" name="UserStore connect should throw an error if database connection fails" time="0.059">
    </testcase>
    <testcase classname="UserStore connect should connect to the database" name="UserStore connect should connect to the database" time="0.027">
    </testcase>
    <testcase classname="getUser should retrieve a user by userId" name="getUser should retrieve a user by userId" time="0.004">
    </testcase>
    <testcase classname="getUserbyname should retrieve a user by username" name="getUserbyname should retrieve a user by username" time="0.007">
    </testcase>
    <testcase classname="addUser should add a new user" name="addUser should add a new user" time="0.004">
    </testcase>
    <testcase classname="addUser should not overwirte an existing user" name="addUser should not overwirte an existing user" time="0.002">
    </testcase>
    <testcase classname="updateUser should update a user" name="updateUser should update a user" time="0.003">
    </testcase>
    <testcase classname="deleteUser should delete a user" name="deleteUser should delete a user" time="0.001">
    </testcase>
    <testcase classname="deleteAllUsers should delete all users" name="deleteAllUsers should delete all users" time="0.001">
    </testcase>
    <testcase classname="close should close the database connection" name="close should close the database connection" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="retrieveAccount" errors="0" failures="0" skipped="0" timestamp="2023-11-21T04:58:46" time="1.444" tests="28">
    <testcase classname="retrieveAccount should emit user details when retrieving an account" name="retrieveAccount should emit user details when retrieving an account" time="0.021">
    </testcase>
    <testcase classname="retrieveAccount should handle the case when the user is not found in retrieveAccount" name="retrieveAccount should handle the case when the user is not found in retrieveAccount" time="0.001">
    </testcase>
    <testcase classname="createAccount should create a new account" name="createAccount should create a new account" time="0.002">
    </testcase>
    <testcase classname="createAccount should handle failure in account creation" name="createAccount should handle failure in account creation" time="0.001">
    </testcase>
    <testcase classname="updateAccount should update an account" name="updateAccount should update an account" time="0.002">
    </testcase>
    <testcase classname="updateAccount should handle failure in account update" name="updateAccount should handle failure in account update" time="0.001">
    </testcase>
    <testcase classname="updateName should update username" name="updateName should update username" time="0.05">
    </testcase>
    <testcase classname="updateName should handle user not found in updateName" name="updateName should handle user not found in updateName" time="0.001">
    </testcase>
    <testcase classname="updateAdminStatus should update admin status" name="updateAdminStatus should update admin status" time="0.002">
    </testcase>
    <testcase classname="updateAdminStatus should handle user not found in updateAdminStatus" name="updateAdminStatus should handle user not found in updateAdminStatus" time="0.001">
    </testcase>
    <testcase classname="updateLastRedemptionDate should update last redemption date" name="updateLastRedemptionDate should update last redemption date" time="0.012">
    </testcase>
    <testcase classname="updateLastRedemptionDate should handle user not found in updateLastRedemptionDate" name="updateLastRedemptionDate should handle user not found in updateLastRedemptionDate" time="0.002">
    </testcase>
    <testcase classname="deleteUser should handle successful user deletion" name="deleteUser should handle successful user deletion" time="0.001">
    </testcase>
    <testcase classname="deleteUser should handle user not found in deleteUser" name="deleteUser should handle user not found in deleteUser" time="0.001">
    </testcase>
    <testcase classname="deleteAllUsers should delete all users successfully" name="deleteAllUsers should delete all users successfully" time="0.001">
    </testcase>
    <testcase classname="deleteAllUsers should handle failure in deleteAllUsers" name="deleteAllUsers should handle failure in deleteAllUsers" time="0.001">
    </testcase>
    <testcase classname="checkuserinDB should find user in database" name="checkuserinDB should find user in database" time="0.001">
    </testcase>
    <testcase classname="checkuserinDB should handle user not found in checkUserisInDB" name="checkuserinDB should handle user not found in checkUserisInDB" time="0">
    </testcase>
    <testcase classname="deposit should handle successful deposit" name="deposit should handle successful deposit" time="0.004">
    </testcase>
    <testcase classname="deposit should handle deposit with user not found" name="deposit should handle deposit with user not found" time="0.001">
    </testcase>
    <testcase classname="depositbyname should handle successful deposit by name" name="depositbyname should handle successful deposit by name" time="0.002">
    </testcase>
    <testcase classname="depositbyname should handle deposit by name with user not found" name="depositbyname should handle deposit by name with user not found" time="0">
    </testcase>
    <testcase classname="depositbyname should not withdraw more than the current balance" name="depositbyname should not withdraw more than the current balance" time="0.001">
    </testcase>
    <testcase classname="withdraw should handle successful withdrawal" name="withdraw should handle successful withdrawal" time="0.002">
    </testcase>
    <testcase classname="withdraw should handle withdrawal with user not found" name="withdraw should handle withdrawal with user not found" time="0.001">
    </testcase>
    <testcase classname="withdraw should handle insufficient funds in withdrawal" name="withdraw should handle insufficient funds in withdrawal" time="0.001">
    </testcase>
    <testcase classname="chatBanned should update chat banned status" name="chatBanned should update chat banned status" time="0.001">
    </testcase>
    <testcase classname="chatBanned should handle user not found in updateChatBanned" name="chatBanned should handle user not found in updateChatBanned" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Roulette" errors="0" failures="0" skipped="0" timestamp="2023-11-21T04:58:46" time="1.479" tests="1">
    <testcase classname="Roulette random" name="Roulette random" time="0.05">
    </testcase>
  </testsuite>
  <testsuite name="Baccarat" errors="0" failures="0" skipped="0" timestamp="2023-11-21T04:58:46" time="2.077" tests="2">
    <testcase classname="Baccarat newGame" name="Baccarat newGame" time="0.07">
    </testcase>
    <testcase classname="Baccarat random" name="Baccarat random" time="0.578">
    </testcase>
  </testsuite>
  <testsuite name="Blackjack" errors="0" failures="0" skipped="0" timestamp="2023-11-21T04:58:46" time="2.13" tests="2">
    <testcase classname="Blackjack newGame" name="Blackjack newGame" time="0.022">
    </testcase>
    <testcase classname="Blackjack random" name="Blackjack random" time="0.669">
    </testcase>
  </testsuite>
  <testsuite name="retrieveAccount" errors="0" failures="0" skipped="0" timestamp="2023-11-21T04:58:46" time="2.739" tests="12">
    <testcase classname="retrieveAccount should trigger when client emits retrieveAccount event" name="retrieveAccount should trigger when client emits retrieveAccount event" time="0.014">
    </testcase>
    <testcase classname="updateAccount should trigger when client emits updateAccount event" name="updateAccount should trigger when client emits updateAccount event" time="0.109">
    </testcase>
    <testcase classname="createAccount should trigger when client emits createAccount event" name="createAccount should trigger when client emits createAccount event" time="0.001">
    </testcase>
    <testcase classname="updateName should trigger when client emits updateName event" name="updateName should trigger when client emits updateName event" time="0.001">
    </testcase>
    <testcase classname="updateAdminStatus should trigger when client emits updateAdminStatus event" name="updateAdminStatus should trigger when client emits updateAdminStatus event" time="0.001">
    </testcase>
    <testcase classname="deposit should trigger when client emits deposit event" name="deposit should trigger when client emits deposit event" time="0.001">
    </testcase>
    <testcase classname="depositbyname should trigger when client emits depositbyname event" name="depositbyname should trigger when client emits depositbyname event" time="0.001">
    </testcase>
    <testcase classname="withdraw should trigger when client emits withdraw event" name="withdraw should trigger when client emits withdraw event" time="0.001">
    </testcase>
    <testcase classname="updateChatBanned should trigger when client emits updateChatBanned event" name="updateChatBanned should trigger when client emits updateChatBanned event" time="0.001">
    </testcase>
    <testcase classname="updateLastRedemptionDate should trigger when client emits updateLastRedemptionDate event" name="updateLastRedemptionDate should trigger when client emits updateLastRedemptionDate event" time="0.001">
    </testcase>
    <testcase classname="deleteUser should trigger when client emits deleteUser event" name="deleteUser should trigger when client emits deleteUser event" time="0.001">
    </testcase>
    <testcase classname="deleteAllUsers should trigger when client emits deleteAllUsers event" name="deleteAllUsers should trigger when client emits deleteAllUsers event" time="0">
    </testcase>
  </testsuite>
  <testsuite name="GameManager" errors="0" failures="0" skipped="0" timestamp="2023-11-21T04:58:46" time="4.14" tests="3">
    <testcase classname="GameManager should initialize the data structure correctly" name="GameManager should initialize the data structure correctly" time="0.026">
    </testcase>
    <testcase classname="GameManager should create a new game correctly" name="GameManager should create a new game correctly" time="1.02">
    </testcase>
    <testcase classname="GameManager should be able to game over" name="GameManager should be able to game over" time="1.316">
    </testcase>
  </testsuite>
  <testsuite name="GameLobby" errors="0" failures="0" skipped="0" timestamp="2023-11-21T04:58:46" time="4.412" tests="17">
    <testcase classname="GameLobby init should create a new lobby correctly" name="GameLobby init should create a new lobby correctly" time="0.053">
    </testcase>
    <testcase classname="GameLobby init should emit &quot;roomAlreadyExist&quot; if the lobby already exists" name="GameLobby init should emit &quot;roomAlreadyExist&quot; if the lobby already exists" time="0.002">
    </testcase>
    <testcase classname="GameLobby addPlayer should add a player to the lobby correctly" name="GameLobby addPlayer should add a player to the lobby correctly" time="0.005">
    </testcase>
    <testcase classname="GameLobby addPlayer should emit &quot;PlayerExceedMax&quot; if the lobby is full" name="GameLobby addPlayer should emit &quot;PlayerExceedMax&quot; if the lobby is full" time="0.002">
    </testcase>
    <testcase classname="GameLobby addPlayer should emit &quot;roomDoesNot&quot; if the lobby does not exist" name="GameLobby addPlayer should emit &quot;roomDoesNot&quot; if the lobby does not exist" time="0.002">
    </testcase>
    <testcase classname="GameLobby removePlayer should remove a player from the lobby correctly" name="GameLobby removePlayer should remove a player from the lobby correctly" time="0.003">
    </testcase>
    <testcase classname="GameLobby removePlayer should not remove a player if their socket ID is not found in any lobby" name="GameLobby removePlayer should not remove a player if their socket ID is not found in any lobby" time="0.002">
    </testcase>
    <testcase classname="GameLobby setPlayerReady should set a player ready in the lobby correctly" name="GameLobby setPlayerReady should set a player ready in the lobby correctly" time="0.002">
    </testcase>
    <testcase classname="GameLobby setPlayerReady should start the game when all players are ready" name="GameLobby setPlayerReady should start the game when all players are ready" time="0.002">
    </testcase>
    <testcase classname="GameLobby startGame should start a game correctly" name="GameLobby startGame should start a game correctly" time="3.014">
    </testcase>
    <testcase classname="GameLobby startGame should not start the game if gameManager is not initialized" name="GameLobby startGame should not start the game if gameManager is not initialized" time="0.001">
    </testcase>
    <testcase classname="GameLobby setPlayerBet should set a player bet correctly" name="GameLobby setPlayerBet should set a player bet correctly" time="0.001">
    </testcase>
    <testcase classname="GameLobby sendChatMessage should send a chat message correctly" name="GameLobby sendChatMessage should send a chat message correctly" time="0">
    </testcase>
    <testcase classname="GameLobby deleteLobby should delete a lobby correctly" name="GameLobby deleteLobby should delete a lobby correctly" time="0.001">
    </testcase>
    <testcase classname="GameLobby getLobby should retrieve a lobby correctly" name="GameLobby getLobby should retrieve a lobby correctly" time="0">
    </testcase>
    <testcase classname="GameLobby getAllLobby should retrieve all lobbies correctly" name="GameLobby getAllLobby should retrieve all lobbies correctly" time="0.001">
    </testcase>
    <testcase classname="GameLobby getPlayerCount should retrieve player count correctly" name="GameLobby getPlayerCount should retrieve player count correctly" time="0">
    </testcase>
  </testsuite>
</testsuites>